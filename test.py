import pandas as pd
import numpy as np
import pickle
from lifelines.statistics import logrank_test
from scipy import stats
from scipy.stats import rankdata
from statsmodels.stats.multitest import multipletests

def map_pateints_id_compass():
    common_patient = pd.read_csv('data/MMRF_CoMMpass_IA15_STAND_ALONE_TRTRESP.csv', sep=';')
    dataset_gene_count = pd.read_csv('data/MMRF_CoMMpass_IA15a_E74GTF_HtSeq_Gene_Counts.txt',
                                     sep='\t',
                                     index_col=0)

    gene_pateints = list(dataset_gene_count.columns)
    gene_patient_id = []
    for i,rows in common_patient.iterrows():
        test_gene_patient_id = rows.public_id + '_' + str(rows.line) + '_BM'
        if test_gene_patient_id in gene_pateints:
            gene_patient_id.append(test_gene_patient_id)
        else:
            test_gene_patient_id_alter = rows.public_id + '_' + str(rows.line) + '_PB'
            if test_gene_patient_id_alter in gene_pateints:
                gene_patient_id.append(test_gene_patient_id_alter)
            else:
                gene_patient_id.append(None)

    common_patient['gene_patient_id'] = gene_patient_id

    return common_patient


def test_logrank():
    pateint_group_dict = pickle.load(open('results/commpass/subgroup/pateint_group_dict', 'rb'))

    cens = 'censpfs'
    tt = 'ttcpfs'
    g = 'Bor_Len_Dex'
    expr_df = pateint_group_dict[g]['gene_data']
    time_df = pateint_group_dict[g]['patient_data']
    # check the group right

    assert len(list(time_df['therclass'].unique())) == 1
    assert list(time_df['therclass'].unique())[0] == 'combined bortezomib/IMIDs-based'
    assert len(list(time_df['thersub'].unique())) == 1
    assert list(time_df['thersub'].unique())[0] == 'Bor-Len-Dex'


    data = pd.merge(time_df,
                    expr_df,
                    left_index=True,
                    right_index=True,
                    how='inner')
    gene = 'ENSG00000107863'
    median_value = np.median(data[gene])
    data_h = data[data[gene] >= median_value]
    data_h['group'] = 'higher'
    data_l = data.loc[data[gene] < median_value]
    data_l['group'] = 'lower'

    # check cu by median
    assert data_h[gene].min() >= data_l[gene].max()

    T_h = data_h[tt]
    E_h = data_h[cens]
    T_l = data_l[tt]
    E_l = data_l[cens]

    results = logrank_test(T_h,
                           T_l,
                           event_observed_A=E_h,
                           event_observed_B=E_l)

    result_check = results.summary

    # check by the file generated by code
    path_saved = 'results/commpass/logrank/'
    logrank_pd = pd.read_csv(path_saved + 'logrank&{}&{}.csv'.format(g, cens))
    assert logrank_pd.loc[logrank_pd['genes_logrank'] == gene, :]['test_statistic_logrank'] == result_check.iloc[0, :]['test_statistic']


def test_correlation():
    pateint_group_dict = pickle.load(open('results/commpass/subgroup/pateint_group_dict', 'rb'))

    cens = 'censos'
    tt = 'ttos'
    g = 'Bor_Dex'
    expr_df = pateint_group_dict[g]['gene_data']
    time_df = pateint_group_dict[g]['patient_data']
    # check the group right

    assert len(list(time_df['therclass'].unique())) == 1
    assert list(time_df['therclass'].unique())[0] == 'Bortezomib-based'
    assert len(list(time_df['thersub'].unique())) == 1
    assert list(time_df['thersub'].unique())[0] == 'Bor-Dex'

    # treat time df as drug df for funtion application
    drug_df  = time_df.loc[:,:]
    drug_df = drug_df.loc[drug_df[cens] == 1, [tt]]
    expr_df = expr_df.loc[expr_df.index.isin(drug_df.index), :]

    drugs = sorted(drug_df.columns)
    genes = sorted(expr_df.columns)

    # we treat the time as drug

    drug = drugs[0]

    assert drug == tt

    drug_vector = drug_df[drug]

    # removing nan cls
    nan_cl = pd.isnull(drug_vector)
    drug_vector = list(drug_vector[~nan_cl])
    X_expr = expr_df.loc[~nan_cl]

    # Iterating across genes
    gene = 'ENSG00000068697'
    gene_vector = X_expr[gene]
    # Pearson correlation
    r, pval = stats.spearmanr(gene_vector, drug_vector)

    # check by the file generated by code
    path_saved = 'results/commpass/correlation/'
    correlation_pd = pd.read_csv(path_saved + '{}&{}.csv'.format(g, cens))
    assert round(correlation_pd.cor[correlation_pd['gene'] == gene].values[0],2) == round(r,2)
    assert round(correlation_pd.pvalue[correlation_pd['gene'] == gene].values[0],2) == round(pval,2)

    # check FDR
    p_vals = list(correlation_pd['pvalue'])
    ranked_p_values = rankdata(p_vals)
    len_g = len(p_vals)
    fdr = multipletests(p_vals, alpha=0.05, method='fdr_bh')[1]

def main():
    common_patient = map_pateints_id_compass()
    common_patient.to_csv('data/MMRF_CoMMpass_IA15_STAND_ALONE_TRTRESP_map.csv', index=None)

